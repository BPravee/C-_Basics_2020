"Function Pointers"

  "Parameterize Fuction as an Argument"

1.How to define task for thread - address of function
2.How to define abstraction in Procedural Language (OOP in C)
3.Event Driven Programming (EventSource- Address of EventHandler(Function Pointer)
4.Callback Implementation 

Command Pattern


CommandSource	has-a		Command       has-a	CommandTarget1.......n
				Seperator

class CommandSource{

	public void DoWork(){

	}

}

class Command{

	Command _targetObjet;
	public Command(CommandTarget targetObject){
		this._targetObject=targetObject
	}
	public void Invoke(){}

}

class CommandTarget{

	public void Foo(){}

}




If program needs to pass function as an argument let developer make use command pattern

Command Method Signature = Target Method Signature


Command Method Signature
-------------------------= New Command Class (Generated By Compiler - use c# keyword delegate)
Target Method Signature


Signature

	public delegate <ReturnTypeOfCommandMethod> <CommandClassName>(CommandMethodArgument List);

	public delegate void Command();

	public class Command{

		public void Invoke();
	}

	public delegate void Command(string s);

	public sealed class Command:System.MultiCastDelegate{

		public Command(object target,method){}
		public void Invoke(string s){}
	}



Observer Pattern
	"Notification Pattern"


Subject				Observer1.................n

State
List of Observers
Register
UnRegister
SetState

			  (Delegate)
Publisher----------------:Distributor----------------->Subscriber(Observer)
  state				List Of Subscribers
  Register			Notify Subscribers
  Unregister
			       


Window

Button 

TextBox




Each Delegate Derived From MultiCastDelegate gets "InvocationList"
How to add delegate instance -> InvoationList 
	MultiCastDelInstance=System.Delegate.Combine(delInstance,delInstance)
					+=
			     System.Delegate.Remove(multiCastDelegateInstance,delInstanceToBeRemoved)
				        -=


Delegate instance as a "Event"

1.Delegate insatnce must be encapsulated(private)

Generated By Compiler (use event keyword)

2.Event Mutators (Add_EventName, Remove_EventName)
3.Event Property



Built In Delegates

.Net fx > 3.5

Action
	void(16 Parameters)
Func
	ReturnType(16 Parameters)


void Test(){

}
void Test(int x){}

Action obj=new Action(obj.Test);
Action<int> obj=new Action<int>(obj.Test);


string Method(int x){}

Func<int,string> obj=new Func<int,string>(obj.Method);


1.Attributes
2.New C# Keywords Grammer

















